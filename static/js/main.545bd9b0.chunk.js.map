{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Loader/Loader.module.css","components/Container/Container.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Loader/Loader.js","components/Container/Container.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","filter","id","loading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","phoneBookReducer","devTools","process","axios","defaults","baseURL","fetchContacts","dispatch","a","get","data","then","catch","addContact","name","number","contact","post","deleteContact","delete","getContacts","getFilter","getLoading","getError","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useSelector","contactsSelectors","useDispatch","useState","setName","setNumber","handleChange","event","currentTarget","value","className","styles","form","onSubmit","e","preventDefault","find","checkName","checkNumber","contactsOperations","alert","label","input","type","pattern","title","required","placeholder","onChange","button","ContactList","map","item","onClick","onDeleteContact","Filter","contactsActions","target","LoaderComponent","container","loader","color","height","width","timeout","Container","children","App","contactsLoading","useEffect","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.545bd9b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__2YzbD\",\"button\":\"ContactList_button__NDKTJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__vinA_\",\"filter\":\"Filter_filter__cO86J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loader_container__20lft\",\"loader\":\"Loader_loader__2xr8b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__z6RT_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1_dpL\",\"label\":\"ContactForm_label__1xIS7\",\"input\":\"ContactForm_input__3yK_n\",\"button\":\"ContactForm_button__3Mfl4\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, { payload }) => payload,\n  [fetchContactsRequest]: () => null,\n  [addContactError]: (_, { payload }) => payload,\n  [addContactRequest]: () => null,\n  [deleteContactError]: (_, { payload }) => payload,\n  [deleteContactRequest]: () => null,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport logger from 'redux-logger';\nimport phoneBookReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: phoneBookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const resetName = () => {\n    setName('');\n  };\n\n  const resetNumber = () => {\n    setNumber('');\n  };\n\n  const checkName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (checkName(name)) {\n      alert(`${name} is already in contacts`);\n    } else if (checkNumber(number)) {\n      alert(`${number} is already in your contacts!`);\n    } else {\n      dispatch(contactsOperations.addContact(name, number));\n    }\n\n    resetName();\n    resetNumber();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          placeholder=\"Adrian Smith\"\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={styles.label}>\n        Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          placeholder=\"000-00-00\"\n          onChange={handleChange}\n        />\n      </label>\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport styles from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={styles.item}>\n          {name}: {number}\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsActions, contactsSelectors } from 'redux/contacts';\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n  const onChange = event =>\n    dispatch(contactsActions.changeFilter(event.target.value));\n\n  return (\n    <>\n      <label className={styles.filter}>\n        Find contacts by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={onChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n    </>\n  );\n}\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport styles from './Loader.module.css';\n\nexport default function LoaderComponent() {\n  return (\n    <div className={styles.container}>\n      <Loader\n        className={styles.loader}\n        type=\"Circles\"\n        color=\"#2275c9\"\n        height={60}\n        width={60}\n        timeout={3000}\n      />\n    </div>\n  );\n}\n","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={styles.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { contactsSelectors, contactsOperations } from './redux/contacts';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport LoaderComponent from './components/Loader';\nimport Container from './components/Container';\nimport './App.css';\n\nexport default function App() {\n  const error = useSelector(contactsSelectors.getError);\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n  const contactsLoading = useSelector(contactsSelectors.getLoading);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      {contactsLoading && <LoaderComponent />}\n\n      <h2>Contacts</h2>\n      {contacts.length > 1 && !error && <Filter />}\n\n      {contacts.length > 0 && !error ? (\n        <ContactList />\n      ) : (\n        <p>Currently your phonebook has no contacts. Please add them.</p>\n      )}\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\n// import { PersistGate } from 'redux-persist/integration/react';\n// import { store, persistor } from './redux/store';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}